<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	">
	<context:component-scan base-package="com.hpkj">   
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
	</context:component-scan> 
	
	<!-- 读资源文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:/db.properties"/>
	</bean>

	<bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 配置数据源 -->
	<bean class="com.alibaba.druid.pool.DruidDataSource" name="dataSource" destroy-method="close" init-method="init">
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="${validationQuery}"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="testWhileIdle" value="true"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/>
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>
		<!-- 监控数据库 -->
		<property name="filters" value="stat"/>
	</bean>
	
		<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="url" value="jdbc:oracle:thin:@192.168.1.7:1521:xe"/>
			<property name="username" value="hpoa"/>
			<property name="password" value="hpoa"/>
		</bean> -->
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop>  -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hiberante.format_sql">true</prop>
			</props>
		</property>
		<property name="configLocations">
			<list>
				<value>
					classpath*:com/hpkj/*/hibernate/hibernate.cfg.xml
				</value>

			</list>
		</property>
	</bean>
	
	 <!-- 配置事务开始 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<!-- 基于配置文件的 -->
	<!--	
	<bean id="transactionBese" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" lazy-init="true" abstract="true">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="get*">PROPAGATION_NEVER</prop>
			</props>
		</property>
	</bean>
	 -->
	
	 <!-- 配置事务的传播特性 -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	  <tx:attributes>
	   <tx:method name="add*" propagation="REQUIRED"/>
	   <tx:method name="update*" propagation="REQUIRED"/>
	   <tx:method name="modify*" propagation="REQUIRED"/>
	   <tx:method name="excute*" propagation="REQUIRED"/>
	   <tx:method name="*" read-only="true"/>
	  </tx:attributes>
	 </tx:advice>
	   
	 <!-- 那些类的哪些方法参与事务 -->
	 <aop:config>
	  <aop:pointcut id="allManagerMethod" expression="execution(* com.hpkj.login.service.*.*(..))"/>
	  <aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice"/>
	 </aop:config>
    <tx:annotation-driven transaction-manager="transactionManager"/>

  	<!-- 加载activiti引擎     --> 
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">    
       <property name="processEngineConfiguration" ref="processEngineConfiguration" />    
    </bean>    
    <bean id="processEngineConfiguration"   class="org.activiti.spring.SpringProcessEngineConfiguration">    
       <property name="dataSource" ref="dataSource" />    
       <property name="transactionManager" ref="transactionManager" />    
       <property name="databaseSchemaUpdate" value="true" />    
       <property name="jobExecutorActivate" value="false" />     
    </bean>
	
    <!-- activiti的各种服务接口  -->
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />  
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />  
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />  
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />  
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" /> 
        
</beans>
